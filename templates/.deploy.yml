# Prépare les jobs deploy qui déploient une version d'image sur le serveur
# Assure qu'un seul job register est exécuté à la fois
# Applique la protection de l'environnement
.server:deploy:
    stage: deploy
    variables:
        ENVIRONMENT: ''
        DOCKER_CONTAINER_PREFIX: ''
        IMAGE_TAG: ''
    image: alpine:latest
    environment:
        name: $ENVIRONMENT
    resource_group: $ENVIRONMENT
    before_script:
        - apk add openssh-client
        - eval $(ssh-agent -s)
    script:
        - ssh -i /root/.ssh/private_key -l debian $SERVER_IP_ADDRESS "echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
          docker stop $DOCKER_CONTAINER_PREFIX || true &&
          docker rm $DOCKER_CONTAINER_PREFIX --volumes || true &&
          docker rm $DOCKER_CONTAINER_PREFIX-setup --volumes || true &&
          docker volume rm $DOCKER_CONTAINER_PREFIX_app-volume || true &&
          docker image rm $CI_REGISTRY_IMAGE:$IMAGE_TAG || true &&
          cd $DOCKER_CONFIG_PATH/$DOCKER_CONTAINER_PREFIX &&
          docker-compose up -d && docker logout $CI_REGISTRY"

# Déploie l'image de production
server:production:deploy:
    extends: .server:deploy
    needs: ['image:latest:register']
    variables:
        ENVIRONMENT: 'production'
        DOCKER_CONTAINER_PREFIX: 'william-donnette-portfolio'
        IMAGE_TAG: 'latest'
    only:
        - main
